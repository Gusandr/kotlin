FILE: delegatesWithAnnotations.kt
    @Anno(LAZY_EXPRESSION) public? final? val x: Intby LAZY_EXPRESSION
        public? get(): <implicit> { LAZY_BLOCK }
    @Anno(LAZY_EXPRESSION) field:@PROPERTY_DELEGATE_FIELD:Anno(LAZY_EXPRESSION) public? final? val delegate: <implicit> = LAZY_EXPRESSION
        public? get(): <implicit>
    @Anno(LAZY_EXPRESSION) field:@PROPERTY_DELEGATE_FIELD:Anno(LAZY_EXPRESSION) public? final? val value: <implicit>by LAZY_EXPRESSION
        @PROPERTY_GETTER:Anno(LAZY_EXPRESSION) public? get(): <implicit> { LAZY_BLOCK }
    @Anno(LAZY_EXPRESSION) field:@PROPERTY_DELEGATE_FIELD:Anno(LAZY_EXPRESSION) public? final? var variable: <implicit>by LAZY_EXPRESSION
        @PROPERTY_GETTER:Anno(LAZY_EXPRESSION) public? get(): <implicit> { LAZY_BLOCK }
        @PROPERTY_SETTER:Anno(LAZY_EXPRESSION) public? set(@SETTER_PARAMETER:Anno(LAZY_EXPRESSION) <set-?>: <implicit>): R|kotlin/Unit| { LAZY_BLOCK }
    public? final? interface Base : R|kotlin/Any| {
    }
    @Anno(LAZY_EXPRESSION) public? final? data class Derived : @Anno(LAZY_EXPRESSION) Base {
        @Anno(LAZY_EXPRESSION) public? constructor(@Anno(LAZY_EXPRESSION) @CONSTRUCTOR_PARAMETER:Anno(LAZY_EXPRESSION) b: @Anno(LAZY_EXPRESSION) Base, c: @Anno(LAZY_EXPRESSION) Base): R|Derived| {
            LAZY_super<<implicit>>
        }

        private final field $$delegate_0: @Anno(LAZY_EXPRESSION) Base = LAZY_EXPRESSION

        @Anno(LAZY_EXPRESSION) @PROPERTY:Anno(LAZY_EXPRESSION) public? final? val b: @Anno(LAZY_EXPRESSION) Base = R|<local>/b|
            @PROPERTY_GETTER:Anno(LAZY_EXPRESSION) public? get(): @Anno(LAZY_EXPRESSION) Base

        public? final? val c: @Anno(LAZY_EXPRESSION) Base = R|<local>/c|
            public? get(): @Anno(LAZY_EXPRESSION) Base

        public? final operator fun component1(): @Anno(LAZY_EXPRESSION) Base

        public? final operator fun component2(): @Anno(LAZY_EXPRESSION) Base

        public final fun copy(@Anno(LAZY_EXPRESSION) @Anno(LAZY_EXPRESSION) b: @Anno(LAZY_EXPRESSION) Base = this@R|/Derived|.R|/Derived.b|, c: @Anno(LAZY_EXPRESSION) Base = this@R|/Derived|.R|/Derived.c|): R|Derived|

    }
